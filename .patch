diff --git a/src/modules/prompt/PromptModuleNode.tsx b/src/modules/prompt/PromptModuleNode.tsx
index c0d2f43c9f941d0ae1c9509ceb8959f5d4562b80..131b67c7ad6d4c2a8f8a2a8b7d2ef08f03054594 100644
--- a/src/modules/prompt/PromptModuleNode.tsx
+++ b/src/modules/prompt/PromptModuleNode.tsx
@@ -1,265 +1,507 @@
-import React, { useEffect, useMemo, useState } from "react";
+import React, {
+  useEffect,
+  useLayoutEffect,
+  useMemo,
+  useRef,
+  useState,
+} from "react";
+
+import {
+  DEFAULT_PROMPT_PRESET_ID,
+  PROMPT_PRESETS,
+  PROMPT_PRESET_MAP,
+  inferPromptPresetFromText,
+} from "@voide/shared";
 
 import {
   PromptConfigState,
   promptConfigFromBytes,
   promptConfigToBytes,
   PromptTarget,
 } from "./promptConfig";
 
 export interface PromptModuleNodeProps {
   id: string;
   config?: Uint8Array | null;
   selected?: boolean;
   onConfigure?: (cfg: Uint8Array) => void;
   onMenuOpen?: (id: string) => void;
   onMenuClose?: (id: string) => void;
 }
 
 const nodeStyles: React.CSSProperties = {
   width: 140,
   padding: 8,
   borderRadius: 6,
   background: "#f9fafb",
   color: "#111827",
   position: "relative",
   cursor: "pointer",
   userSelect: "none",
   boxSizing: "border-box",
 };
 
 const portBase: React.CSSProperties = {
   position: "absolute",
   width: 12,
   height: 12,
   borderRadius: 3,
   transform: "translateY(-50%)",
 };
 
+const presetListStyle: React.CSSProperties = {
+  display: "flex",
+  flexDirection: "column",
+  gap: 6,
+  marginTop: 6,
+};
+
+const presetButtonBaseStyle: React.CSSProperties = {
+  textAlign: "left",
+  padding: "8px 10px",
+  borderRadius: 6,
+  border: "1px solid #e2e8f0",
+  background: "#f8fafc",
+  color: "#0f172a",
+  display: "flex",
+  flexDirection: "column",
+  gap: 2,
+  fontSize: 12,
+  lineHeight: 1.4,
+  cursor: "pointer",
+  transition: "border-color 0.2s ease, background 0.2s ease",
+};
+
+const presetButtonActiveStyle: React.CSSProperties = {
+  border: "1px solid #2563eb",
+  background: "#eff6ff",
+  boxShadow: "0 0 0 1px rgba(37,99,235,0.12) inset",
+};
+
+const presetLabelStyle: React.CSSProperties = {
+  fontSize: 12,
+  fontWeight: 600,
+  color: "#0f172a",
+};
+
+const presetDescriptionStyle: React.CSSProperties = {
+  fontSize: 11,
+  color: "#64748b",
+  lineHeight: 1.4,
+};
+
+const fieldLabelStyle: React.CSSProperties = {
+  fontSize: 12,
+  fontWeight: 600,
+  color: "#0f172a",
+  letterSpacing: 0.3,
+  textTransform: "uppercase",
+};
+
+const radioGroupStyle: React.CSSProperties = {
+  display: "flex",
+  flexDirection: "column",
+  gap: 6,
+  marginTop: 6,
+};
+
+const radioLabelStyle: React.CSSProperties = {
+  display: "flex",
+  alignItems: "center",
+  gap: 8,
+  fontSize: 12,
+  color: "#0f172a",
+};
+
+const radioInputStyle: React.CSSProperties = {
+  accentColor: "#2563eb",
+};
+
+const textareaStyle: React.CSSProperties = {
+  marginTop: 6,
+  width: "100%",
+  minHeight: 80,
+  resize: "none" as const,
+  padding: 6,
+  borderRadius: 4,
+  border: "1px solid #cbd5f5",
+  background: "#f9fafb",
+  fontSize: 12,
+  lineHeight: 1.5,
+  color: "#0f172a",
+  fontFamily: "Inter, system-ui, sans-serif",
+};
+
+const helperTextStyle: React.CSSProperties = {
+  fontSize: 11,
+  color: "#94a3b8",
+  marginTop: 4,
+};
+
+const actionRowStyle: React.CSSProperties = {
+  marginTop: 16,
+  display: "flex",
+  gap: 8,
+  justifyContent: "flex-end",
+};
+
 function truncate(text: string, length: number): string {
   if (text.length <= length) return text;
   return text.slice(0, Math.max(0, length - 1)).trimEnd() + "…";
 }
 
+function cloneConfig(config: PromptConfigState): PromptConfigState {
+  return {
+    text: config.text,
+    preset: config.preset,
+    to: config.to,
+    passthrough: { ...config.passthrough },
+  };
+}
+
+function normalizeForSave(config: PromptConfigState): PromptConfigState {
+  let presetId =
+    config.preset in PROMPT_PRESET_MAP
+      ? config.preset
+      : DEFAULT_PROMPT_PRESET_ID;
+  const to: PromptTarget = config.to === "system" ? "system" : "user";
+  let text = config.text;
+  if (presetId !== "custom") {
+    const presetText = PROMPT_PRESET_MAP[presetId]?.defaultText ?? "";
+    if (text.trim().length === 0) {
+      text = presetText;
+    } else if (text.trim() !== presetText.trim()) {
+      presetId = "custom";
+    }
+  }
+  return {
+    text,
+    preset: presetId,
+    to,
+    passthrough: { ...config.passthrough },
+  };
+}
+
+function formatPresetLabel(presetId: string): string {
+  const preset = PROMPT_PRESET_MAP[presetId];
+  if (preset) {
+    return preset.label;
+  }
+  if (!presetId) {
+    return "Custom";
+  }
+  return presetId
+    .split(/[-_]/)
+    .filter(Boolean)
+    .map((chunk) => chunk.charAt(0).toUpperCase() + chunk.slice(1))
+    .join(" ");
+}
+
 export function PromptModuleNode({
   id,
   config,
   selected = false,
   onConfigure,
   onMenuOpen,
   onMenuClose,
 }: PromptModuleNodeProps) {
   const [storedConfig, setStoredConfig] = useState<PromptConfigState>(() =>
-    promptConfigFromBytes(config ?? null)
+    normalizeForSave(promptConfigFromBytes(config ?? null))
   );
   const [menuOpen, setMenuOpen] = useState(false);
-  const [draft, setDraft] = useState<PromptConfigState>(storedConfig);
+  const [draft, setDraft] = useState<PromptConfigState>(() =>
+    cloneConfig(storedConfig)
+  );
+  const textareaRef = useRef<HTMLTextAreaElement | null>(null);
 
   useEffect(() => {
-    const decoded = promptConfigFromBytes(config ?? null);
+    const decoded = normalizeForSave(promptConfigFromBytes(config ?? null));
     setStoredConfig(decoded);
-    setDraft(decoded);
+    setDraft(cloneConfig(decoded));
   }, [config?.buffer, config?.byteOffset, config?.byteLength]);
 
+  useLayoutEffect(() => {
+    if (!menuOpen) {
+      return;
+    }
+    const element = textareaRef.current;
+    if (!element) {
+      return;
+    }
+    element.style.height = "auto";
+    element.style.height = `${Math.max(element.scrollHeight, 80)}px`;
+  }, [draft.text, menuOpen]);
+
   const summary = useMemo(() => {
     const targetLabel = storedConfig.to === "system" ? "System" : "User";
-    const preview = storedConfig.text.trim().length
-      ? truncate(storedConfig.text.trim(), 70)
+    const presetLabel = formatPresetLabel(storedConfig.preset);
+    const trimmed = storedConfig.text.trim();
+    let preview = trimmed.length
+      ? truncate(trimmed, 70)
       : "(no prompt text)";
-    return { targetLabel, preview };
+    if (!trimmed.length && storedConfig.preset !== "custom") {
+      const presetText = (
+        PROMPT_PRESET_MAP[storedConfig.preset]?.defaultText ?? ""
+      ).trim();
+      if (presetText.length) {
+        preview = truncate(presetText, 70);
+      }
+    }
+    return { targetLabel, presetLabel, preview };
   }, [storedConfig]);
 
   function openMenu() {
     setMenuOpen(true);
-    setDraft(storedConfig);
+    setDraft(cloneConfig(storedConfig));
     onMenuOpen?.(id);
   }
 
   function closeMenu() {
     setMenuOpen(false);
     onMenuClose?.(id);
   }
 
-  function updateDraft(field: keyof Pick<PromptConfigState, "text" | "to">, value: string) {
+  function selectPreset(nextId: string) {
+    setDraft((prev) => {
+      const resolvedId =
+        nextId in PROMPT_PRESET_MAP ? nextId : DEFAULT_PROMPT_PRESET_ID;
+      const preset = PROMPT_PRESET_MAP[resolvedId];
+      return {
+        ...prev,
+        preset: resolvedId,
+        text:
+          resolvedId === "custom"
+            ? prev.text
+            : preset?.defaultText ?? prev.text,
+        passthrough: { ...prev.passthrough },
+      };
+    });
+  }
+
+  function handlePlacementChange(value: PromptTarget) {
     setDraft((prev) => ({
       ...prev,
-      [field]: field === "to" ? (value as PromptTarget) : value,
+      to: value,
       passthrough: { ...prev.passthrough },
     }));
   }
 
+  function handleTextChange(value: string) {
+    setDraft((prev) => {
+      let candidatePreset =
+        prev.preset in PROMPT_PRESET_MAP
+          ? prev.preset
+          : DEFAULT_PROMPT_PRESET_ID;
+      const trimmed = value.trim();
+      const presetText =
+        candidatePreset !== "custom"
+          ? PROMPT_PRESET_MAP[candidatePreset]?.defaultText.trim() ?? ""
+          : "";
+      if (candidatePreset !== "custom" && trimmed !== presetText) {
+        candidatePreset = "custom";
+      }
+      if (candidatePreset === "custom") {
+        const inferred = inferPromptPresetFromText(value);
+        if (inferred && trimmed === inferred.defaultText.trim()) {
+          candidatePreset = inferred.id;
+        }
+      }
+      return {
+        ...prev,
+        text: value,
+        preset: candidatePreset,
+        passthrough: { ...prev.passthrough },
+      };
+    });
+  }
+
   function saveConfig() {
-    setStoredConfig(draft);
-    onConfigure?.(promptConfigToBytes(draft));
+    const normalized = normalizeForSave(draft);
+    setStoredConfig(normalized);
+    onConfigure?.(promptConfigToBytes(normalized));
     closeMenu();
   }
 
   return (
     <div
       style={{
         ...nodeStyles,
         border: selected ? "2px solid #2563eb" : "1px solid #4b5563",
         boxShadow: selected ? "0 0 0 2px rgba(37,99,235,0.15)" : "none",
       }}
       onContextMenu={(e) => {
         e.preventDefault();
         if (!menuOpen) {
           openMenu();
         }
       }}
       onDoubleClick={() => {
         if (!menuOpen) {
           openMenu();
         }
       }}
     >
       <div style={{ fontWeight: 600, fontSize: 14, marginBottom: 4 }}>Prompt</div>
       <div
         style={{
           fontSize: 11,
           textTransform: "uppercase",
           color: "#6b7280",
           marginBottom: 6,
           letterSpacing: 0.5,
         }}
       >
-        → {summary.targetLabel}
+        → {summary.targetLabel} • {summary.presetLabel}
       </div>
       <div style={{ fontSize: 12, lineHeight: 1.4, whiteSpace: "pre-wrap" }}>
         {summary.preview}
       </div>
 
       {/* Input port */}
       <div
         style={{
           ...portBase,
           left: -6,
           top: "50%",
           background: "#0ea5e9",
         }}
       />
 
       {/* Output port */}
       <div
         style={{
           ...portBase,
           right: -6,
           top: "50%",
           background: "#f97316",
         }}
       />
 
       {menuOpen && (
         <div
           style={{
             position: "absolute",
             top: 0,
             left: "calc(100% + 8px)",
-            width: 240,
+            width: 260,
             background: "#ffffff",
             border: "1px solid #d1d5db",
             boxShadow: "0 10px 30px rgba(15, 23, 42, 0.12)",
             borderRadius: 8,
             padding: 12,
             zIndex: 20,
           }}
         >
           <header style={{ marginBottom: 8 }}>
             <div style={{ fontWeight: 600, fontSize: 13 }}>Prompt Settings</div>
-            <div style={{ fontSize: 11, color: "#6b7280" }}>Configure text injection</div>
+            <div style={{ fontSize: 11, color: "#6b7280" }}>
+              Configure text injection
+            </div>
           </header>
 
-          <label style={{ display: "block", fontSize: 12, fontWeight: 500 }}>
-            Inject Into
-            <select
-              value={draft.to}
-              onChange={(e) => updateDraft("to", e.target.value)}
-              style={{
-                marginTop: 4,
-                width: "100%",
-                padding: "4px 6px",
-                borderRadius: 4,
-                border: "1px solid #cbd5f5",
-                background: "#f9fafb",
-              }}
-            >
-              <option value="user">User message</option>
-              <option value="system">System prompt</option>
-            </select>
-          </label>
-
-          <label
-            style={{
-              display: "block",
-              marginTop: 12,
-              fontSize: 12,
-              fontWeight: 500,
-            }}
-          >
-            Prompt Text
+          <div style={{ marginBottom: 12 }}>
+            <div style={fieldLabelStyle}>Prompt Preset</div>
+            <div style={presetListStyle}>
+              {PROMPT_PRESETS.map((preset) => {
+                const isActive = draft.preset === preset.id;
+                return (
+                  <button
+                    key={preset.id}
+                    type="button"
+                    onClick={() => selectPreset(preset.id)}
+                    aria-pressed={isActive}
+                    style={{
+                      ...presetButtonBaseStyle,
+                      ...(isActive ? presetButtonActiveStyle : {}),
+                    }}
+                  >
+                    <span style={presetLabelStyle}>{preset.label}</span>
+                    <span style={presetDescriptionStyle}>
+                      {preset.description}
+                    </span>
+                  </button>
+                );
+              })}
+            </div>
+          </div>
+
+          <div style={{ marginBottom: 12 }}>
+            <div style={fieldLabelStyle}>Inject Into</div>
+            <div style={radioGroupStyle}>
+              <label style={radioLabelStyle}>
+                <input
+                  type="radio"
+                  name={`prompt-placement-${id}`}
+                  value="user"
+                  checked={draft.to === "user"}
+                  onChange={() => handlePlacementChange("user")}
+                  style={radioInputStyle}
+                />
+                User message
+              </label>
+              <label style={radioLabelStyle}>
+                <input
+                  type="radio"
+                  name={`prompt-placement-${id}`}
+                  value="system"
+                  checked={draft.to === "system"}
+                  onChange={() => handlePlacementChange("system")}
+                  style={radioInputStyle}
+                />
+                System prompt
+              </label>
+            </div>
+          </div>
+
+          <div>
+            <div style={fieldLabelStyle}>Prompt Text</div>
             <textarea
+              ref={textareaRef}
               value={draft.text}
-              onChange={(e) => updateDraft("text", e.target.value)}
-              rows={5}
-              placeholder="Describe the additional instructions"
-              style={{
-                marginTop: 4,
-                width: "100%",
-                resize: "vertical",
-                minHeight: 80,
-                padding: 6,
-                borderRadius: 4,
-                border: "1px solid #cbd5f5",
-                background: "#f9fafb",
-                fontSize: 12,
-                lineHeight: 1.4,
-              }}
+              onChange={(event) => handleTextChange(event.target.value)}
+              placeholder="Describe the instructions to inject before the LLM runs"
+              style={textareaStyle}
             />
-          </label>
-
-          <div
-            style={{
-              marginTop: 12,
-              display: "flex",
-              gap: 8,
-              justifyContent: "flex-end",
-            }}
-          >
+            <div style={helperTextStyle}>
+              The textarea expands automatically as you type.
+            </div>
+          </div>
+
+          <div style={actionRowStyle}>
             <button
               type="button"
               onClick={closeMenu}
               style={{
                 padding: "6px 10px",
                 borderRadius: 4,
                 border: "1px solid transparent",
                 background: "transparent",
                 color: "#1f2937",
                 fontSize: 12,
               }}
             >
               Cancel
             </button>
             <button
               type="button"
               onClick={saveConfig}
               style={{
                 padding: "6px 12px",
                 borderRadius: 4,
                 border: "none",
                 background: "#2563eb",
                 color: "white",
                 fontSize: 12,
                 fontWeight: 600,
               }}
             >
               Save
             </button>
           </div>
         </div>
       )}
     </div>
   );
 }
 
 export default PromptModuleNode;
-
diff --git a/src/modules/prompt/promptConfig.ts b/src/modules/prompt/promptConfig.ts
index d113e155ce872fe1d8c98e43cc00143968346412..01747c6d372aa8b93cf24ad5223c785566d43fa4 100644
--- a/src/modules/prompt/promptConfig.ts
+++ b/src/modules/prompt/promptConfig.ts
@@ -1,54 +1,112 @@
+import {
+  DEFAULT_PROMPT_PRESET_ID,
+  PROMPT_PRESET_MAP,
+  type PromptPreset,
+  inferPromptPresetFromText,
+} from "@voide/shared";
+
 export type PromptTarget = "system" | "user";
 
 export interface PromptConfigState {
   text: string;
+  preset: string;
   to: PromptTarget;
   passthrough: Record<string, unknown>;
 }
 
+const defaultPreset: PromptPreset | undefined =
+  PROMPT_PRESET_MAP[DEFAULT_PROMPT_PRESET_ID];
+
 export const defaultPromptConfig: PromptConfigState = {
-  text: "",
+  text: defaultPreset?.defaultText ?? "",
+  preset: defaultPreset?.id ?? DEFAULT_PROMPT_PRESET_ID,
   to: "user",
   passthrough: {},
 };
 
 function isRecord(value: unknown): value is Record<string, unknown> {
   return typeof value === "object" && value !== null && !Array.isArray(value);
 }
 
 export function promptConfigFromBytes(
   bytes?: Uint8Array | null
 ): PromptConfigState {
   if (!bytes || bytes.length === 0) {
     return { ...defaultPromptConfig, passthrough: {} };
   }
 
   try {
     const raw = JSON.parse(new TextDecoder().decode(bytes));
     if (!isRecord(raw)) {
       return { ...defaultPromptConfig, passthrough: {} };
     }
 
-    const { text, to, ...rest } = raw;
-    const normalizedText = typeof text === "string" ? text : "";
+    const { text, template, preset, tone, to, ...rest } = raw;
+    const initialText =
+      typeof text === "string"
+        ? text
+        : typeof template === "string"
+          ? template
+          : "";
+
+    let normalizedPreset =
+      typeof preset === "string" && preset in PROMPT_PRESET_MAP
+        ? preset
+        : undefined;
+
+    if (!normalizedPreset) {
+      const inferred = inferPromptPresetFromText(initialText);
+      normalizedPreset = inferred?.id;
+    }
+
+    const trimmed = initialText.trim();
+
+    if (!normalizedPreset) {
+      normalizedPreset = trimmed.length === 0 ? DEFAULT_PROMPT_PRESET_ID : "custom";
+    }
+
+    let normalizedText = initialText;
+    if (normalizedPreset !== "custom") {
+      const presetText = PROMPT_PRESET_MAP[normalizedPreset]?.defaultText ?? "";
+      if (trimmed.length === 0) {
+        normalizedText = presetText;
+      } else if (trimmed !== presetText.trim()) {
+        normalizedPreset = "custom";
+      }
+    }
+
+    if (normalizedPreset === "custom") {
+      normalizedText = initialText;
+    }
+
     const normalizedTo: PromptTarget = to === "system" ? "system" : "user";
 
+    const passthrough: Record<string, unknown> = {};
+    for (const [key, value] of Object.entries(rest)) {
+      if (key === "template" || key === "tone") {
+        continue;
+      }
+      passthrough[key] = value;
+    }
+
     return {
       text: normalizedText,
+      preset: normalizedPreset,
       to: normalizedTo,
-      passthrough: { ...rest },
+      passthrough,
     };
   } catch {
     return { ...defaultPromptConfig, passthrough: {} };
   }
 }
 
 export function promptConfigToBytes(cfg: PromptConfigState): Uint8Array {
   const payload = {
     ...cfg.passthrough,
     text: cfg.text,
+    preset: cfg.preset,
     to: cfg.to,
   } satisfies Record<string, unknown>;
 
   return new TextEncoder().encode(JSON.stringify(payload));
 }
diff --git a/src/modules/prompt/PromptModuleNode.tsx b/src/modules/prompt/PromptModuleNode.tsx
index c0d2f43c9f941d0ae1c9509ceb8959f5d4562b80..131b67c7ad6d4c2a8f8a2a8b7d2ef08f03054594 100644
--- a/src/modules/prompt/PromptModuleNode.tsx
+++ b/src/modules/prompt/PromptModuleNode.tsx
@@ -1,265 +1,507 @@
-import React, { useEffect, useMemo, useState } from "react";
+import React, {
+  useEffect,
+  useLayoutEffect,
+  useMemo,
+  useRef,
+  useState,
+} from "react";
+
+import {
+  DEFAULT_PROMPT_PRESET_ID,
+  PROMPT_PRESETS,
+  PROMPT_PRESET_MAP,
+  inferPromptPresetFromText,
+} from "@voide/shared";
 
 import {
   PromptConfigState,
   promptConfigFromBytes,
   promptConfigToBytes,
   PromptTarget,
 } from "./promptConfig";
 
 export interface PromptModuleNodeProps {
   id: string;
   config?: Uint8Array | null;
   selected?: boolean;
   onConfigure?: (cfg: Uint8Array) => void;
   onMenuOpen?: (id: string) => void;
   onMenuClose?: (id: string) => void;
 }
 
 const nodeStyles: React.CSSProperties = {
   width: 140,
   padding: 8,
   borderRadius: 6,
   background: "#f9fafb",
   color: "#111827",
   position: "relative",
   cursor: "pointer",
   userSelect: "none",
   boxSizing: "border-box",
 };
 
 const portBase: React.CSSProperties = {
   position: "absolute",
   width: 12,
   height: 12,
   borderRadius: 3,
   transform: "translateY(-50%)",
 };
 
+const presetListStyle: React.CSSProperties = {
+  display: "flex",
+  flexDirection: "column",
+  gap: 6,
+  marginTop: 6,
+};
+
+const presetButtonBaseStyle: React.CSSProperties = {
+  textAlign: "left",
+  padding: "8px 10px",
+  borderRadius: 6,
+  border: "1px solid #e2e8f0",
+  background: "#f8fafc",
+  color: "#0f172a",
+  display: "flex",
+  flexDirection: "column",
+  gap: 2,
+  fontSize: 12,
+  lineHeight: 1.4,
+  cursor: "pointer",
+  transition: "border-color 0.2s ease, background 0.2s ease",
+};
+
+const presetButtonActiveStyle: React.CSSProperties = {
+  border: "1px solid #2563eb",
+  background: "#eff6ff",
+  boxShadow: "0 0 0 1px rgba(37,99,235,0.12) inset",
+};
+
+const presetLabelStyle: React.CSSProperties = {
+  fontSize: 12,
+  fontWeight: 600,
+  color: "#0f172a",
+};
+
+const presetDescriptionStyle: React.CSSProperties = {
+  fontSize: 11,
+  color: "#64748b",
+  lineHeight: 1.4,
+};
+
+const fieldLabelStyle: React.CSSProperties = {
+  fontSize: 12,
+  fontWeight: 600,
+  color: "#0f172a",
+  letterSpacing: 0.3,
+  textTransform: "uppercase",
+};
+
+const radioGroupStyle: React.CSSProperties = {
+  display: "flex",
+  flexDirection: "column",
+  gap: 6,
+  marginTop: 6,
+};
+
+const radioLabelStyle: React.CSSProperties = {
+  display: "flex",
+  alignItems: "center",
+  gap: 8,
+  fontSize: 12,
+  color: "#0f172a",
+};
+
+const radioInputStyle: React.CSSProperties = {
+  accentColor: "#2563eb",
+};
+
+const textareaStyle: React.CSSProperties = {
+  marginTop: 6,
+  width: "100%",
+  minHeight: 80,
+  resize: "none" as const,
+  padding: 6,
+  borderRadius: 4,
+  border: "1px solid #cbd5f5",
+  background: "#f9fafb",
+  fontSize: 12,
+  lineHeight: 1.5,
+  color: "#0f172a",
+  fontFamily: "Inter, system-ui, sans-serif",
+};
+
+const helperTextStyle: React.CSSProperties = {
+  fontSize: 11,
+  color: "#94a3b8",
+  marginTop: 4,
+};
+
+const actionRowStyle: React.CSSProperties = {
+  marginTop: 16,
+  display: "flex",
+  gap: 8,
+  justifyContent: "flex-end",
+};
+
 function truncate(text: string, length: number): string {
   if (text.length <= length) return text;
   return text.slice(0, Math.max(0, length - 1)).trimEnd() + "…";
 }
 
+function cloneConfig(config: PromptConfigState): PromptConfigState {
+  return {
+    text: config.text,
+    preset: config.preset,
+    to: config.to,
+    passthrough: { ...config.passthrough },
+  };
+}
+
+function normalizeForSave(config: PromptConfigState): PromptConfigState {
+  let presetId =
+    config.preset in PROMPT_PRESET_MAP
+      ? config.preset
+      : DEFAULT_PROMPT_PRESET_ID;
+  const to: PromptTarget = config.to === "system" ? "system" : "user";
+  let text = config.text;
+  if (presetId !== "custom") {
+    const presetText = PROMPT_PRESET_MAP[presetId]?.defaultText ?? "";
+    if (text.trim().length === 0) {
+      text = presetText;
+    } else if (text.trim() !== presetText.trim()) {
+      presetId = "custom";
+    }
+  }
+  return {
+    text,
+    preset: presetId,
+    to,
+    passthrough: { ...config.passthrough },
+  };
+}
+
+function formatPresetLabel(presetId: string): string {
+  const preset = PROMPT_PRESET_MAP[presetId];
+  if (preset) {
+    return preset.label;
+  }
+  if (!presetId) {
+    return "Custom";
+  }
+  return presetId
+    .split(/[-_]/)
+    .filter(Boolean)
+    .map((chunk) => chunk.charAt(0).toUpperCase() + chunk.slice(1))
+    .join(" ");
+}
+
 export function PromptModuleNode({
   id,
   config,
   selected = false,
   onConfigure,
   onMenuOpen,
   onMenuClose,
 }: PromptModuleNodeProps) {
   const [storedConfig, setStoredConfig] = useState<PromptConfigState>(() =>
-    promptConfigFromBytes(config ?? null)
+    normalizeForSave(promptConfigFromBytes(config ?? null))
   );
   const [menuOpen, setMenuOpen] = useState(false);
-  const [draft, setDraft] = useState<PromptConfigState>(storedConfig);
+  const [draft, setDraft] = useState<PromptConfigState>(() =>
+    cloneConfig(storedConfig)
+  );
+  const textareaRef = useRef<HTMLTextAreaElement | null>(null);
 
   useEffect(() => {
-    const decoded = promptConfigFromBytes(config ?? null);
+    const decoded = normalizeForSave(promptConfigFromBytes(config ?? null));
     setStoredConfig(decoded);
-    setDraft(decoded);
+    setDraft(cloneConfig(decoded));
   }, [config?.buffer, config?.byteOffset, config?.byteLength]);
 
+  useLayoutEffect(() => {
+    if (!menuOpen) {
+      return;
+    }
+    const element = textareaRef.current;
+    if (!element) {
+      return;
+    }
+    element.style.height = "auto";
+    element.style.height = `${Math.max(element.scrollHeight, 80)}px`;
+  }, [draft.text, menuOpen]);
+
   const summary = useMemo(() => {
     const targetLabel = storedConfig.to === "system" ? "System" : "User";
-    const preview = storedConfig.text.trim().length
-      ? truncate(storedConfig.text.trim(), 70)
+    const presetLabel = formatPresetLabel(storedConfig.preset);
+    const trimmed = storedConfig.text.trim();
+    let preview = trimmed.length
+      ? truncate(trimmed, 70)
       : "(no prompt text)";
-    return { targetLabel, preview };
+    if (!trimmed.length && storedConfig.preset !== "custom") {
+      const presetText = (
+        PROMPT_PRESET_MAP[storedConfig.preset]?.defaultText ?? ""
+      ).trim();
+      if (presetText.length) {
+        preview = truncate(presetText, 70);
+      }
+    }
+    return { targetLabel, presetLabel, preview };
   }, [storedConfig]);
 
   function openMenu() {
     setMenuOpen(true);
-    setDraft(storedConfig);
+    setDraft(cloneConfig(storedConfig));
     onMenuOpen?.(id);
   }
 
   function closeMenu() {
     setMenuOpen(false);
     onMenuClose?.(id);
   }
 
-  function updateDraft(field: keyof Pick<PromptConfigState, "text" | "to">, value: string) {
+  function selectPreset(nextId: string) {
+    setDraft((prev) => {
+      const resolvedId =
+        nextId in PROMPT_PRESET_MAP ? nextId : DEFAULT_PROMPT_PRESET_ID;
+      const preset = PROMPT_PRESET_MAP[resolvedId];
+      return {
+        ...prev,
+        preset: resolvedId,
+        text:
+          resolvedId === "custom"
+            ? prev.text
+            : preset?.defaultText ?? prev.text,
+        passthrough: { ...prev.passthrough },
+      };
+    });
+  }
+
+  function handlePlacementChange(value: PromptTarget) {
     setDraft((prev) => ({
       ...prev,
-      [field]: field === "to" ? (value as PromptTarget) : value,
+      to: value,
       passthrough: { ...prev.passthrough },
     }));
   }
 
+  function handleTextChange(value: string) {
+    setDraft((prev) => {
+      let candidatePreset =
+        prev.preset in PROMPT_PRESET_MAP
+          ? prev.preset
+          : DEFAULT_PROMPT_PRESET_ID;
+      const trimmed = value.trim();
+      const presetText =
+        candidatePreset !== "custom"
+          ? PROMPT_PRESET_MAP[candidatePreset]?.defaultText.trim() ?? ""
+          : "";
+      if (candidatePreset !== "custom" && trimmed !== presetText) {
+        candidatePreset = "custom";
+      }
+      if (candidatePreset === "custom") {
+        const inferred = inferPromptPresetFromText(value);
+        if (inferred && trimmed === inferred.defaultText.trim()) {
+          candidatePreset = inferred.id;
+        }
+      }
+      return {
+        ...prev,
+        text: value,
+        preset: candidatePreset,
+        passthrough: { ...prev.passthrough },
+      };
+    });
+  }
+
   function saveConfig() {
-    setStoredConfig(draft);
-    onConfigure?.(promptConfigToBytes(draft));
+    const normalized = normalizeForSave(draft);
+    setStoredConfig(normalized);
+    onConfigure?.(promptConfigToBytes(normalized));
     closeMenu();
   }
 
   return (
     <div
       style={{
         ...nodeStyles,
         border: selected ? "2px solid #2563eb" : "1px solid #4b5563",
         boxShadow: selected ? "0 0 0 2px rgba(37,99,235,0.15)" : "none",
       }}
       onContextMenu={(e) => {
         e.preventDefault();
         if (!menuOpen) {
           openMenu();
         }
       }}
       onDoubleClick={() => {
         if (!menuOpen) {
           openMenu();
         }
       }}
     >
       <div style={{ fontWeight: 600, fontSize: 14, marginBottom: 4 }}>Prompt</div>
       <div
         style={{
           fontSize: 11,
           textTransform: "uppercase",
           color: "#6b7280",
           marginBottom: 6,
           letterSpacing: 0.5,
         }}
       >
-        → {summary.targetLabel}
+        → {summary.targetLabel} • {summary.presetLabel}
       </div>
       <div style={{ fontSize: 12, lineHeight: 1.4, whiteSpace: "pre-wrap" }}>
         {summary.preview}
       </div>
 
       {/* Input port */}
       <div
         style={{
           ...portBase,
           left: -6,
           top: "50%",
           background: "#0ea5e9",
         }}
       />
 
       {/* Output port */}
       <div
         style={{
           ...portBase,
           right: -6,
           top: "50%",
           background: "#f97316",
         }}
       />
 
       {menuOpen && (
         <div
           style={{
             position: "absolute",
             top: 0,
             left: "calc(100% + 8px)",
-            width: 240,
+            width: 260,
             background: "#ffffff",
             border: "1px solid #d1d5db",
             boxShadow: "0 10px 30px rgba(15, 23, 42, 0.12)",
             borderRadius: 8,
             padding: 12,
             zIndex: 20,
           }}
         >
           <header style={{ marginBottom: 8 }}>
             <div style={{ fontWeight: 600, fontSize: 13 }}>Prompt Settings</div>
-            <div style={{ fontSize: 11, color: "#6b7280" }}>Configure text injection</div>
+            <div style={{ fontSize: 11, color: "#6b7280" }}>
+              Configure text injection
+            </div>
           </header>
 
-          <label style={{ display: "block", fontSize: 12, fontWeight: 500 }}>
-            Inject Into
-            <select
-              value={draft.to}
-              onChange={(e) => updateDraft("to", e.target.value)}
-              style={{
-                marginTop: 4,
-                width: "100%",
-                padding: "4px 6px",
-                borderRadius: 4,
-                border: "1px solid #cbd5f5",
-                background: "#f9fafb",
-              }}
-            >
-              <option value="user">User message</option>
-              <option value="system">System prompt</option>
-            </select>
-          </label>
-
-          <label
-            style={{
-              display: "block",
-              marginTop: 12,
-              fontSize: 12,
-              fontWeight: 500,
-            }}
-          >
-            Prompt Text
+          <div style={{ marginBottom: 12 }}>
+            <div style={fieldLabelStyle}>Prompt Preset</div>
+            <div style={presetListStyle}>
+              {PROMPT_PRESETS.map((preset) => {
+                const isActive = draft.preset === preset.id;
+                return (
+                  <button
+                    key={preset.id}
+                    type="button"
+                    onClick={() => selectPreset(preset.id)}
+                    aria-pressed={isActive}
+                    style={{
+                      ...presetButtonBaseStyle,
+                      ...(isActive ? presetButtonActiveStyle : {}),
+                    }}
+                  >
+                    <span style={presetLabelStyle}>{preset.label}</span>
+                    <span style={presetDescriptionStyle}>
+                      {preset.description}
+                    </span>
+                  </button>
+                );
+              })}
+            </div>
+          </div>
+
+          <div style={{ marginBottom: 12 }}>
+            <div style={fieldLabelStyle}>Inject Into</div>
+            <div style={radioGroupStyle}>
+              <label style={radioLabelStyle}>
+                <input
+                  type="radio"
+                  name={`prompt-placement-${id}`}
+                  value="user"
+                  checked={draft.to === "user"}
+                  onChange={() => handlePlacementChange("user")}
+                  style={radioInputStyle}
+                />
+                User message
+              </label>
+              <label style={radioLabelStyle}>
+                <input
+                  type="radio"
+                  name={`prompt-placement-${id}`}
+                  value="system"
+                  checked={draft.to === "system"}
+                  onChange={() => handlePlacementChange("system")}
+                  style={radioInputStyle}
+                />
+                System prompt
+              </label>
+            </div>
+          </div>
+
+          <div>
+            <div style={fieldLabelStyle}>Prompt Text</div>
             <textarea
+              ref={textareaRef}
               value={draft.text}
-              onChange={(e) => updateDraft("text", e.target.value)}
-              rows={5}
-              placeholder="Describe the additional instructions"
-              style={{
-                marginTop: 4,
-                width: "100%",
-                resize: "vertical",
-                minHeight: 80,
-                padding: 6,
-                borderRadius: 4,
-                border: "1px solid #cbd5f5",
-                background: "#f9fafb",
-                fontSize: 12,
-                lineHeight: 1.4,
-              }}
+              onChange={(event) => handleTextChange(event.target.value)}
+              placeholder="Describe the instructions to inject before the LLM runs"
+              style={textareaStyle}
             />
-          </label>
-
-          <div
-            style={{
-              marginTop: 12,
-              display: "flex",
-              gap: 8,
-              justifyContent: "flex-end",
-            }}
-          >
+            <div style={helperTextStyle}>
+              The textarea expands automatically as you type.
+            </div>
+          </div>
+
+          <div style={actionRowStyle}>
             <button
               type="button"
               onClick={closeMenu}
               style={{
                 padding: "6px 10px",
                 borderRadius: 4,
                 border: "1px solid transparent",
                 background: "transparent",
                 color: "#1f2937",
                 fontSize: 12,
               }}
             >
               Cancel
             </button>
             <button
               type="button"
               onClick={saveConfig}
               style={{
                 padding: "6px 12px",
                 borderRadius: 4,
                 border: "none",
                 background: "#2563eb",
                 color: "white",
                 fontSize: 12,
                 fontWeight: 600,
               }}
             >
               Save
             </button>
           </div>
         </div>
       )}
     </div>
   );
 }
 
 export default PromptModuleNode;
-


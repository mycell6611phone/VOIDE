// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.21.12
// source: voide/v1/flow.proto
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
export const protobufPackage = "voide.v1";
function createBaseUserText() {
    return { text: "" };
}
export const UserText = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.text !== "") {
            writer.uint32(10).string(message.text);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserText();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { text: isSet(object.text) ? globalThis.String(object.text) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.text !== "") {
            obj.text = message.text;
        }
        return obj;
    },
    create(base) {
        return UserText.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUserText();
        message.text = object.text ?? "";
        return message;
    },
};
function createBasePromptText() {
    return { text: "" };
}
export const PromptText = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.text !== "") {
            writer.uint32(10).string(message.text);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePromptText();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { text: isSet(object.text) ? globalThis.String(object.text) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.text !== "") {
            obj.text = message.text;
        }
        return obj;
    },
    create(base) {
        return PromptText.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePromptText();
        message.text = object.text ?? "";
        return message;
    },
};
function createBaseLLMText() {
    return { text: "" };
}
export const LLMText = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.text !== "") {
            writer.uint32(10).string(message.text);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLLMText();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { text: isSet(object.text) ? globalThis.String(object.text) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.text !== "") {
            obj.text = message.text;
        }
        return obj;
    },
    create(base) {
        return LLMText.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLLMText();
        message.text = object.text ?? "";
        return message;
    },
};
function createBaseAnyBlob() {
    return { data: new Uint8Array(0) };
}
export const AnyBlob = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.data.length !== 0) {
            writer.uint32(10).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAnyBlob();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0) };
    },
    toJSON(message) {
        const obj = {};
        if (message.data.length !== 0) {
            obj.data = base64FromBytes(message.data);
        }
        return obj;
    },
    create(base) {
        return AnyBlob.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAnyBlob();
        message.data = object.data ?? new Uint8Array(0);
        return message;
    },
};
function createBaseNodeConfig() {
    return { id: "", type: "" };
}
export const NodeConfig = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.type !== "") {
            writer.uint32(18).string(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNodeConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        return obj;
    },
    create(base) {
        return NodeConfig.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNodeConfig();
        message.id = object.id ?? "";
        message.type = object.type ?? "";
        return message;
    },
};
function createBaseEdge() {
    return { from: "", to: "", type: "" };
}
export const Edge = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.from !== "") {
            writer.uint32(10).string(message.from);
        }
        if (message.to !== "") {
            writer.uint32(18).string(message.to);
        }
        if (message.type !== "") {
            writer.uint32(26).string(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEdge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.from = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.to = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            from: isSet(object.from) ? globalThis.String(object.from) : "",
            to: isSet(object.to) ? globalThis.String(object.to) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.from !== "") {
            obj.from = message.from;
        }
        if (message.to !== "") {
            obj.to = message.to;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        return obj;
    },
    create(base) {
        return Edge.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEdge();
        message.from = object.from ?? "";
        message.to = object.to ?? "";
        message.type = object.type ?? "";
        return message;
    },
};
function createBaseFlow() {
    return { nodes: [], edges: [] };
}
export const Flow = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.nodes) {
            NodeConfig.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.edges) {
            Edge.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFlow();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.nodes.push(NodeConfig.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.edges.push(Edge.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            nodes: globalThis.Array.isArray(object?.nodes) ? object.nodes.map((e) => NodeConfig.fromJSON(e)) : [],
            edges: globalThis.Array.isArray(object?.edges) ? object.edges.map((e) => Edge.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.nodes?.length) {
            obj.nodes = message.nodes.map((e) => NodeConfig.toJSON(e));
        }
        if (message.edges?.length) {
            obj.edges = message.edges.map((e) => Edge.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return Flow.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFlow();
        message.nodes = object.nodes?.map((e) => NodeConfig.fromPartial(e)) || [];
        message.edges = object.edges?.map((e) => Edge.fromPartial(e)) || [];
        return message;
    },
};
function createBaseInputCfg() {
    return { id: "" };
}
export const InputCfg = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInputCfg();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return InputCfg.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseInputCfg();
        message.id = object.id ?? "";
        return message;
    },
};
function createBasePromptCfg() {
    return { id: "" };
}
export const PromptCfg = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePromptCfg();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return PromptCfg.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePromptCfg();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseLLMCfg() {
    return { model: "" };
}
export const LLMCfg = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.model !== "") {
            writer.uint32(10).string(message.model);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLLMCfg();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.model = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { model: isSet(object.model) ? globalThis.String(object.model) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.model !== "") {
            obj.model = message.model;
        }
        return obj;
    },
    create(base) {
        return LLMCfg.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLLMCfg();
        message.model = object.model ?? "";
        return message;
    },
};
function createBaseBranchCfg() {
    return { condition: "" };
}
export const BranchCfg = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.condition !== "") {
            writer.uint32(10).string(message.condition);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBranchCfg();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.condition = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { condition: isSet(object.condition) ? globalThis.String(object.condition) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.condition !== "") {
            obj.condition = message.condition;
        }
        return obj;
    },
    create(base) {
        return BranchCfg.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBranchCfg();
        message.condition = object.condition ?? "";
        return message;
    },
};
function createBaseLogCfg() {
    return { name: "" };
}
export const LogCfg = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLogCfg();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        return obj;
    },
    create(base) {
        return LogCfg.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLogCfg();
        message.name = object.name ?? "";
        return message;
    },
};
function createBaseOutputCfg() {
    return { name: "" };
}
export const OutputCfg = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOutputCfg();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        return obj;
    },
    create(base) {
        return OutputCfg.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOutputCfg();
        message.name = object.name ?? "";
        return message;
    },
};
function createBaseExecuteRequest() {
    return { flow: undefined };
}
export const ExecuteRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.flow !== undefined) {
            Flow.encode(message.flow, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExecuteRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.flow = Flow.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { flow: isSet(object.flow) ? Flow.fromJSON(object.flow) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.flow !== undefined) {
            obj.flow = Flow.toJSON(message.flow);
        }
        return obj;
    },
    create(base) {
        return ExecuteRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseExecuteRequest();
        message.flow = (object.flow !== undefined && object.flow !== null) ? Flow.fromPartial(object.flow) : undefined;
        return message;
    },
};
function createBasePortValue() {
    return { port: "", value: new Uint8Array(0), type: "" };
}
export const PortValue = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.port !== "") {
            writer.uint32(10).string(message.port);
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        if (message.type !== "") {
            writer.uint32(26).string(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePortValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.port = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            port: isSet(object.port) ? globalThis.String(object.port) : "",
            value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
            type: isSet(object.type) ? globalThis.String(object.type) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.port !== "") {
            obj.port = message.port;
        }
        if (message.value.length !== 0) {
            obj.value = base64FromBytes(message.value);
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        return obj;
    },
    create(base) {
        return PortValue.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePortValue();
        message.port = object.port ?? "";
        message.value = object.value ?? new Uint8Array(0);
        message.type = object.type ?? "";
        return message;
    },
};
function createBaseNodeEvent() {
    return { nodeId: "", event: "", value: undefined };
}
export const NodeEvent = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.nodeId !== "") {
            writer.uint32(10).string(message.nodeId);
        }
        if (message.event !== "") {
            writer.uint32(18).string(message.event);
        }
        if (message.value !== undefined) {
            PortValue.encode(message.value, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNodeEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.nodeId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.event = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.value = PortValue.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            nodeId: isSet(object.nodeId) ? globalThis.String(object.nodeId) : "",
            event: isSet(object.event) ? globalThis.String(object.event) : "",
            value: isSet(object.value) ? PortValue.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.nodeId !== "") {
            obj.nodeId = message.nodeId;
        }
        if (message.event !== "") {
            obj.event = message.event;
        }
        if (message.value !== undefined) {
            obj.value = PortValue.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return NodeEvent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNodeEvent();
        message.nodeId = object.nodeId ?? "";
        message.event = object.event ?? "";
        message.value = (object.value !== undefined && object.value !== null)
            ? PortValue.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseExecuteResponse() {
    return { events: [] };
}
export const ExecuteResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.events) {
            NodeEvent.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExecuteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.events.push(NodeEvent.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            events: globalThis.Array.isArray(object?.events) ? object.events.map((e) => NodeEvent.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.events?.length) {
            obj.events = message.events.map((e) => NodeEvent.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ExecuteResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseExecuteResponse();
        message.events = object.events?.map((e) => NodeEvent.fromPartial(e)) || [];
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.21.12
// source: voide/modules/llm.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal.js";

export const protobufPackage = "voide.modules.llm.v1";

export interface ParamValue {
  stringValue?: string | undefined;
  doubleValue?: number | undefined;
  intValue?: number | undefined;
  boolValue?: boolean | undefined;
}

export interface PromptMsg {
  role: PromptMsg_Role;
  content: string;
}

export enum PromptMsg_Role {
  ROLE_UNSPECIFIED = 0,
  ROLE_SYSTEM = 1,
  ROLE_USER = 2,
  ROLE_ASSISTANT = 3,
  UNRECOGNIZED = -1,
}

export function promptMsg_RoleFromJSON(object: any): PromptMsg_Role {
  switch (object) {
    case 0:
    case "ROLE_UNSPECIFIED":
      return PromptMsg_Role.ROLE_UNSPECIFIED;
    case 1:
    case "ROLE_SYSTEM":
      return PromptMsg_Role.ROLE_SYSTEM;
    case 2:
    case "ROLE_USER":
      return PromptMsg_Role.ROLE_USER;
    case 3:
    case "ROLE_ASSISTANT":
      return PromptMsg_Role.ROLE_ASSISTANT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PromptMsg_Role.UNRECOGNIZED;
  }
}

export function promptMsg_RoleToJSON(object: PromptMsg_Role): string {
  switch (object) {
    case PromptMsg_Role.ROLE_UNSPECIFIED:
      return "ROLE_UNSPECIFIED";
    case PromptMsg_Role.ROLE_SYSTEM:
      return "ROLE_SYSTEM";
    case PromptMsg_Role.ROLE_USER:
      return "ROLE_USER";
    case PromptMsg_Role.ROLE_ASSISTANT:
      return "ROLE_ASSISTANT";
    case PromptMsg_Role.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface LLMConfig {
  adapter: string;
  modelId: string;
  temperature: number;
  maxTokens: number;
  runtime: string;
  prompts: PromptMsg[];
  params: { [key: string]: ParamValue };
}

export interface LLMConfig_ParamsEntry {
  key: string;
  value: ParamValue | undefined;
}

function createBaseParamValue(): ParamValue {
  return { stringValue: undefined, doubleValue: undefined, intValue: undefined, boolValue: undefined };
}

export const ParamValue = {
  encode(message: ParamValue, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.stringValue !== undefined) {
      writer.uint32(10).string(message.stringValue);
    }
    if (message.doubleValue !== undefined) {
      writer.uint32(17).double(message.doubleValue);
    }
    if (message.intValue !== undefined) {
      writer.uint32(24).int64(message.intValue);
    }
    if (message.boolValue !== undefined) {
      writer.uint32(32).bool(message.boolValue);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ParamValue {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParamValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.stringValue = reader.string();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.doubleValue = reader.double();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.intValue = longToNumber(reader.int64() as Long);
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.boolValue = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParamValue {
    return {
      stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : undefined,
      doubleValue: isSet(object.doubleValue) ? globalThis.Number(object.doubleValue) : undefined,
      intValue: isSet(object.intValue) ? globalThis.Number(object.intValue) : undefined,
      boolValue: isSet(object.boolValue) ? globalThis.Boolean(object.boolValue) : undefined,
    };
  },

  toJSON(message: ParamValue): unknown {
    const obj: any = {};
    if (message.stringValue !== undefined) {
      obj.stringValue = message.stringValue;
    }
    if (message.doubleValue !== undefined) {
      obj.doubleValue = message.doubleValue;
    }
    if (message.intValue !== undefined) {
      obj.intValue = Math.round(message.intValue);
    }
    if (message.boolValue !== undefined) {
      obj.boolValue = message.boolValue;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParamValue>, I>>(base?: I): ParamValue {
    return ParamValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParamValue>, I>>(object: I): ParamValue {
    const message = createBaseParamValue();
    message.stringValue = object.stringValue ?? undefined;
    message.doubleValue = object.doubleValue ?? undefined;
    message.intValue = object.intValue ?? undefined;
    message.boolValue = object.boolValue ?? undefined;
    return message;
  },
};

function createBasePromptMsg(): PromptMsg {
  return { role: 0, content: "" };
}

export const PromptMsg = {
  encode(message: PromptMsg, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.role !== 0) {
      writer.uint32(8).int32(message.role);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PromptMsg {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePromptMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.role = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PromptMsg {
    return {
      role: isSet(object.role) ? promptMsg_RoleFromJSON(object.role) : 0,
      content: isSet(object.content) ? globalThis.String(object.content) : "",
    };
  },

  toJSON(message: PromptMsg): unknown {
    const obj: any = {};
    if (message.role !== 0) {
      obj.role = promptMsg_RoleToJSON(message.role);
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PromptMsg>, I>>(base?: I): PromptMsg {
    return PromptMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PromptMsg>, I>>(object: I): PromptMsg {
    const message = createBasePromptMsg();
    message.role = object.role ?? 0;
    message.content = object.content ?? "";
    return message;
  },
};

function createBaseLLMConfig(): LLMConfig {
  return { adapter: "", modelId: "", temperature: 0, maxTokens: 0, runtime: "", prompts: [], params: {} };
}

export const LLMConfig = {
  encode(message: LLMConfig, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.adapter !== "") {
      writer.uint32(10).string(message.adapter);
    }
    if (message.modelId !== "") {
      writer.uint32(18).string(message.modelId);
    }
    if (message.temperature !== 0) {
      writer.uint32(25).double(message.temperature);
    }
    if (message.maxTokens !== 0) {
      writer.uint32(32).int32(message.maxTokens);
    }
    if (message.runtime !== "") {
      writer.uint32(42).string(message.runtime);
    }
    for (const v of message.prompts) {
      PromptMsg.encode(v!, writer.uint32(50).fork()).ldelim();
    }
    Object.entries(message.params).forEach(([key, value]) => {
      LLMConfig_ParamsEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LLMConfig {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLLMConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.adapter = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.modelId = reader.string();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.temperature = reader.double();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.maxTokens = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.runtime = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.prompts.push(PromptMsg.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = LLMConfig_ParamsEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.params[entry7.key] = entry7.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LLMConfig {
    return {
      adapter: isSet(object.adapter) ? globalThis.String(object.adapter) : "",
      modelId: isSet(object.modelId) ? globalThis.String(object.modelId) : "",
      temperature: isSet(object.temperature) ? globalThis.Number(object.temperature) : 0,
      maxTokens: isSet(object.maxTokens) ? globalThis.Number(object.maxTokens) : 0,
      runtime: isSet(object.runtime) ? globalThis.String(object.runtime) : "",
      prompts: globalThis.Array.isArray(object?.prompts) ? object.prompts.map((e: any) => PromptMsg.fromJSON(e)) : [],
      params: isObject(object.params)
        ? Object.entries(object.params).reduce<{ [key: string]: ParamValue }>((acc, [key, value]) => {
          acc[key] = ParamValue.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: LLMConfig): unknown {
    const obj: any = {};
    if (message.adapter !== "") {
      obj.adapter = message.adapter;
    }
    if (message.modelId !== "") {
      obj.modelId = message.modelId;
    }
    if (message.temperature !== 0) {
      obj.temperature = message.temperature;
    }
    if (message.maxTokens !== 0) {
      obj.maxTokens = Math.round(message.maxTokens);
    }
    if (message.runtime !== "") {
      obj.runtime = message.runtime;
    }
    if (message.prompts?.length) {
      obj.prompts = message.prompts.map((e) => PromptMsg.toJSON(e));
    }
    if (message.params) {
      const entries = Object.entries(message.params);
      if (entries.length > 0) {
        obj.params = {};
        entries.forEach(([k, v]) => {
          obj.params[k] = ParamValue.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LLMConfig>, I>>(base?: I): LLMConfig {
    return LLMConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LLMConfig>, I>>(object: I): LLMConfig {
    const message = createBaseLLMConfig();
    message.adapter = object.adapter ?? "";
    message.modelId = object.modelId ?? "";
    message.temperature = object.temperature ?? 0;
    message.maxTokens = object.maxTokens ?? 0;
    message.runtime = object.runtime ?? "";
    message.prompts = object.prompts?.map((e) => PromptMsg.fromPartial(e)) || [];
    message.params = Object.entries(object.params ?? {}).reduce<{ [key: string]: ParamValue }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = ParamValue.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseLLMConfig_ParamsEntry(): LLMConfig_ParamsEntry {
  return { key: "", value: undefined };
}

export const LLMConfig_ParamsEntry = {
  encode(message: LLMConfig_ParamsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      ParamValue.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LLMConfig_ParamsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLLMConfig_ParamsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = ParamValue.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LLMConfig_ParamsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? ParamValue.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: LLMConfig_ParamsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = ParamValue.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LLMConfig_ParamsEntry>, I>>(base?: I): LLMConfig_ParamsEntry {
    return LLMConfig_ParamsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LLMConfig_ParamsEntry>, I>>(object: I): LLMConfig_ParamsEntry {
    const message = createBaseLLMConfig_ParamsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ParamValue.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

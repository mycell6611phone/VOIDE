syntax = "proto3";
package voide.flow;

import "google/protobuf/empty.proto";

message Text { string value = 1; }
message Json { bytes value = 1; }
message Embedding { repeated float values = 1; }

message Payload {
  oneof kind {
    Text text = 1;
    Json json = 2;
    Embedding embedding = 3;
  }
  map<string, string> meta = 10;
  string trace_id = 11;
  uint32 schema_version = 12;
}

message Port { string node_id = 1; string port = 2; }
message Edge { Port from = 1; Port to = 2; }

message NodeParam { string key = 1; string value = 2; }
message Node {
  string id = 1;
  string type = 2;               // "ui" | "prompt" | "memory" | "llm"
  repeated NodeParam params = 3;
  repeated string in_ports = 4;
  repeated string out_ports = 5;
}

message FlowDef {
  string id = 1;
  repeated Node nodes = 2;
  repeated Edge edges = 3;
  uint32 version = 4;
}

service Engine {
  rpc RunFlow (FlowDef) returns (stream Payload);
  rpc Push (Payload) returns (Payload);
}

service LLM { rpc Complete (Payload) returns (Payload); }

service Memory {
  // Two inputs one output design
  // write: persist only, no emit
  rpc Write (Payload) returns (.google.protobuf.Empty);
  // stream: retrieve and enrich, emit on out
  rpc Retrieve (Payload) returns (Payload);
}

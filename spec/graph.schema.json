{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://voide.app/spec/graph.schema.json",
  "title": "VOIDE Flow Graph",
  "description": "Authoring schema for VOIDE canvas graphs exchanged between the renderer and runtime layers.",
  "type": "object",
  "additionalProperties": false,
  "required": ["version", "nodes", "edges"],
  "properties": {
    "version": {
      "type": "string",
      "pattern": "^\\d+\\.\\d+(?:\\.\\d+)?$",
      "description": "Semantic version of the graph format (major.minor[.patch])."
    },
    "nodes": {
      "type": "array",
      "items": { "$ref": "#/$defs/Node" },
      "description": "Ordered collection of modules present on the canvas.",
      "default": []
    },
    "edges": {
      "type": "array",
      "items": { "$ref": "#/$defs/Edge" },
      "description": "Connections between module ports.",
      "default": []
    }
  },
  "$defs": {
    "Node": {
      "type": "object",
      "description": "Graph node representing a configured module instance on the canvas.",
      "additionalProperties": false,
      "required": ["id", "type", "position"],
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "description": "Stable node identifier that is unique within the flow."
        },
        "type": {
          "$ref": "#/$defs/NodeType",
          "description": "Module type identifier recognised by the VOIDE runtime."
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "description": "Optional human-readable label rendered on the node."
        },
        "position": {
          "$ref": "#/$defs/Position",
          "description": "Canvas coordinates for the node anchor point in pixels."
        },
        "options": {
          "type": "object",
          "description": "Arbitrary module configuration payload persisted alongside the node.",
          "default": {},
          "additionalProperties": true
        }
      },
      "$comment": "Memory nodes must expose exactly two inbound ports (save, retrieve) and one outbound port (applied)."
    },
    "Edge": {
      "type": "object",
      "description": "Directed connection from an output port to an input port.",
      "additionalProperties": false,
      "required": ["id", "from", "to"],
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "description": "Stable edge identifier."
        },
        "from": {
          "$ref": "#/$defs/PortEndpoint",
          "description": "Source node and port for the connection."
        },
        "to": {
          "$ref": "#/$defs/PortEndpoint",
          "description": "Destination node and port for the connection."
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "description": "Optional label rendered on the edge for operator guidance."
        }
      },
      "allOf": [
        {
          "$comment": "Diviter outputs must advertise deterministic labels so downstream tooling can branch reliably.",
          "if": {
            "properties": {
              "from": {
                "type": "object",
                "properties": {
                  "port": { "enum": ["pass", "div"] }
                },
                "required": ["port"]
              }
            },
            "required": ["from"]
          },
          "then": {
            "properties": {
              "label": { "$ref": "#/$defs/DiviterEdgeLabel" }
            },
            "required": ["label"]
          }
        },
        {
          "if": {
            "properties": {
              "from": {
                "properties": { "port": { "const": "pass" } },
                "required": ["port"]
              }
            },
            "required": ["from"]
          },
          "then": {
            "properties": {
              "label": { "const": "PASS" }
            }
          }
        },
        {
          "if": {
            "properties": {
              "from": {
                "properties": { "port": { "const": "div" } },
                "required": ["port"]
              }
            },
            "required": ["from"]
          },
          "then": {
            "properties": {
              "label": { "const": "DIV" }
            }
          }
        }
      ]
    },
    "PortEndpoint": {
      "type": "object",
      "description": "Reference to a concrete node port in the flow graph.",
      "additionalProperties": false,
      "required": ["node", "port"],
      "properties": {
        "node": {
          "type": "string",
          "minLength": 1,
          "description": "Identifier of the node that hosts the port."
        },
        "port": {
          "type": "string",
          "minLength": 1,
          "description": "Identifier of the port exposed by the node."
        }
      }
    },
    "Position": {
      "type": "object",
      "description": "Canvas position expressed in pixels from the top-left origin.",
      "additionalProperties": false,
      "required": ["x", "y"],
      "properties": {
        "x": {
          "type": "number",
          "description": "Horizontal canvas coordinate in pixels."
        },
        "y": {
          "type": "number",
          "description": "Vertical canvas coordinate in pixels."
        }
      }
    },
    "NodeType": {
      "type": "string",
      "enum": [
        "InputNode",
        "PromptNode",
        "LLMNode",
        "BranchNode",
        "RouterDividerNode",
        "BulletListNormalizerNode",
        "LogNode",
        "OutputNode",
        "orchestrator",
        "critic",
        "llm.generic",
        "system.prompt",
        "embedding",
        "retriever",
        "vector.store",
        "loop",
        "output",
        "memory",
        "divider",
        "diviter"
      ],
      "description": "Supported module types detected in the flow serialization code base. Include legacy and runtime node identifiers."
    },
    "DiviterEdgeLabel": {
      "type": "string",
      "enum": ["PASS", "DIV"],
      "description": "Allowed labels for edges emitted by a Diviter output port."
    },
    "portsByType": {
      "$comment": "Canonical port definitions by node type. Use this map when materialising menus or validating port wiring.",
      "const": {
        "InputNode": {
          "inputs": [],
          "outputs": [
            { "id": "text", "kinds": ["UserText"] }
          ]
        },
        "PromptNode": {
          "inputs": [
            { "id": "text", "kinds": ["UserText"] }
          ],
          "outputs": [
            { "id": "prompt", "kinds": ["PromptText"] }
          ]
        },
        "LLMNode": {
          "inputs": [
            { "id": "prompt", "kinds": ["PromptText"] }
          ],
          "outputs": [
            { "id": "text", "kinds": ["LLMText"] }
          ]
        },
        "BranchNode": {
          "inputs": [
            { "id": "text", "kinds": ["LLMText"] }
          ],
          "outputs": [
            { "id": "pass", "kinds": ["LLMText"] },
            { "id": "fail", "kinds": ["LLMText"] }
          ]
        },
        "RouterDividerNode": {
          "inputs": [
            { "id": "text", "kinds": ["UserText"] }
          ],
          "outputs": [
            { "id": "valid", "kinds": ["LLMText"] },
            { "id": "invalid", "kinds": ["LLMText"] }
          ]
        },
        "BulletListNormalizerNode": {
          "inputs": [
            { "id": "text", "kinds": ["LLMText"] }
          ],
          "outputs": [
            { "id": "text", "kinds": ["LLMText"] }
          ]
        },
        "LogNode": {
          "inputs": [
            { "id": "value", "kinds": ["AnyBlob"] }
          ],
          "outputs": [
            { "id": "value", "kinds": ["AnyBlob"] }
          ]
        },
        "OutputNode": {
          "inputs": [
            { "id": "text", "kinds": ["LLMText"] }
          ],
          "outputs": []
        },
        "orchestrator": {
          "inputs": [
            { "id": "in", "kinds": ["text", "json", "messages"] }
          ],
          "outputs": [
            { "id": "out", "kinds": ["text", "json", "messages"] }
          ]
        },
        "critic": {
          "inputs": [
            { "id": "text", "kinds": ["text"] }
          ],
          "outputs": [
            { "id": "notes", "kinds": ["text"] }
          ]
        },
        "llm.generic": {
          "inputs": [
            { "id": "prompt", "kinds": ["text"] }
          ],
          "outputs": [
            { "id": "completion", "kinds": ["text"] }
          ]
        },
        "system.prompt": {
          "inputs": [],
          "outputs": [
            { "id": "out", "kinds": ["text"] }
          ]
        },
        "embedding": {
          "inputs": [
            { "id": "text", "kinds": ["text"] }
          ],
          "outputs": [
            { "id": "vec", "kinds": ["vector"] }
          ]
        },
        "retriever": {
          "inputs": [
            { "id": "vec", "kinds": ["vector"] }
          ],
          "outputs": [
            { "id": "docs", "kinds": ["json"] }
          ]
        },
        "vector.store": {
          "inputs": [
            { "id": "upsert", "kinds": ["json", "vector"] }
          ],
          "outputs": [
            { "id": "ok", "kinds": ["json"] }
          ]
        },
        "loop": {
          "inputs": [
            { "id": "in", "kinds": ["text"] }
          ],
          "outputs": [
            { "id": "body", "kinds": ["text"] },
            { "id": "out", "kinds": ["text"] }
          ]
        },
        "output": {
          "inputs": [
            { "id": "in", "kinds": ["text", "json"] }
          ],
          "outputs": []
        },
        "memory": {
          "inputs": [
            { "id": "save", "kinds": ["text", "json"] },
            { "id": "retrieve", "kinds": ["text", "json"] }
          ],
          "outputs": [
            { "id": "applied", "kinds": ["text", "json"] }
          ]
        },
        "divider": {
          "inputs": [
            { "id": "in", "kinds": ["text", "json"] }
          ],
          "outputs": [
            { "id": "pass", "kinds": ["text", "json"] },
            { "id": "div", "kinds": ["text", "json"] }
          ]
        },
        "diviter": {
          "inputs": [
            { "id": "in", "kinds": ["text", "json"] }
          ],
          "outputs": [
            { "id": "pass", "kinds": ["text", "json"] },
            { "id": "div", "kinds": ["text", "json"] }
          ]
        }
      }
    }
  }
}

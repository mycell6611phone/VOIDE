{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://voide.app/spec/graph.schema.json",
  "title": "VOIDE Canvas Graph",
  "type": "object",
  "additionalProperties": false,
  "required": ["version", "nodes", "edges"],
  "properties": {
    "version": {
      "type": "string",
      "pattern": "^\\d+\\.\\d+(?:\\.\\d+)?$",
      "description": "Semantic version of the graph format (major.minor[.patch])."
    },
    "nodes": {
      "type": "array",
      "items": { "$ref": "#/$defs/Node" },
      "description": "Ordered collection of modules present on the canvas.",
      "default": []
    },
    "edges": {
      "type": "array",
      "items": { "$ref": "#/$defs/Edge" },
      "description": "Connections between module ports.",
      "default": []
    }
  },
  "$defs": {
    "Node": {
      "type": "object",
      "additionalProperties": false,
      "required": ["id", "type", "position"],
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "description": "Stable node identifier."
        },
        "type": {
          "$ref": "#/$defs/NodeType",
          "description": "Module type identifier drawn from the VOIDE palette."
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "description": "Optional human readable label rendered on the node."
        },
        "position": {
          "$ref": "#/$defs/Position",
          "description": "Canvas coordinates for the node anchor point."
        },
        "options": {
          "type": "object",
          "description": "Arbitrary module configuration payload.",
          "default": {},
          "additionalProperties": true
        }
      },
      "$comment": "Memory nodes must expose exactly two inbound ports (save, retrieve) and one outbound port (applied). Validate this contract in application logic when instantiating ports."
    },
    "Edge": {
      "type": "object",
      "additionalProperties": false,
      "required": ["id", "from", "to"],
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1,
          "description": "Stable edge identifier."
        },
        "from": {
          "$ref": "#/$defs/PortEndpoint",
          "description": "Source node and port for the connection."
        },
        "to": {
          "$ref": "#/$defs/PortEndpoint",
          "description": "Destination node and port for the connection."
        },
        "label": {
          "type": "string",
          "minLength": 1,
          "description": "Optional label rendered on the edge."
        }
      },
      "$comment": "When the resolved source node has type 'diviter', restrict edge labels to the enum defined at #/$defs/DiviterEdgeLabel. This relationship is enforced at runtime because JSON Schema cannot cross-reference node type data."
    },
    "PortEndpoint": {
      "type": "object",
      "additionalProperties": false,
      "required": ["node", "port"],
      "properties": {
        "node": {
          "type": "string",
          "minLength": 1,
          "description": "Identifier of the node that hosts the port."
        },
        "port": {
          "type": "string",
          "minLength": 1,
          "description": "Identifier of the port exposed by the node."
        }
      }
    },
    "Position": {
      "type": "object",
      "additionalProperties": false,
      "required": ["x", "y"],
      "properties": {
        "x": {
          "type": "number",
          "description": "Horizontal canvas coordinate in pixels."
        },
        "y": {
          "type": "number",
          "description": "Vertical canvas coordinate in pixels."
        }
      }
    },
    "NodeType": {
      "type": "string",
      "enum": [
        "interface",
        "llm",
        "prompt",
        "debate",
        "cache",
        "log",
        "memory",
        "divider",
        "diviter",
        "tool"
      ],
      "description": "Supported module types available on the VOIDE canvas. 'diviter' is accepted as an alias for legacy divider modules."
    },
    "DiviterEdgeLabel": {
      "type": "string",
      "enum": ["PASS", "DIV"],
      "description": "Allowed labels for edges emitted by a diviter node."
    },
    "portsByType": {
      "$comment": "Canonical port definitions by node type. Use this map when materialising ports for a node instance.",
      "const": {
        "interface": {
          "inputs": [],
          "outputs": [
            { "id": "conversation", "kinds": ["TEXT"] }
          ]
        },
        "llm": {
          "inputs": [
            { "id": "prompt", "kinds": ["TEXT"] }
          ],
          "outputs": [
            { "id": "response", "kinds": ["TEXT"] }
          ]
        },
        "prompt": {
          "inputs": [],
          "outputs": [
            { "id": "prompt", "kinds": ["TEXT"] }
          ]
        },
        "debate": {
          "inputs": [
            { "id": "input", "kinds": ["TEXT"] }
          ],
          "outputs": [
            { "id": "result", "kinds": ["TEXT"] }
          ]
        },
        "cache": {
          "inputs": [
            { "id": "in", "kinds": ["TEXT", "JSON"] }
          ],
          "outputs": [
            { "id": "out", "kinds": ["TEXT", "JSON"] }
          ]
        },
        "log": {
          "inputs": [
            { "id": "entry", "kinds": ["TEXT", "JSON"] }
          ],
          "outputs": []
        },
        "memory": {
          "inputs": [
            { "id": "save", "kinds": ["TEXT", "JSON"] },
            { "id": "retrieve", "kinds": ["TEXT", "JSON"] }
          ],
          "outputs": [
            { "id": "applied", "kinds": ["TEXT", "JSON"] }
          ]
        },
        "divider": {
          "inputs": [
            { "id": "in", "kinds": ["TEXT", "JSON"] }
          ],
          "outputs": [
            { "id": "pass", "kinds": ["TEXT", "JSON"] },
            { "id": "div", "kinds": ["TEXT", "JSON"] }
          ]
        },
        "diviter": {
          "inputs": [
            { "id": "in", "kinds": ["TEXT", "JSON"] }
          ],
          "outputs": [
            { "id": "pass", "kinds": ["TEXT", "JSON"] },
            { "id": "div", "kinds": ["TEXT", "JSON"] }
          ]
        },
        "tool": {
          "inputs": [
            { "id": "input", "kinds": ["TEXT", "JSON"] }
          ],
          "outputs": [
            { "id": "result", "kinds": ["TEXT", "JSON"] }
          ]
        }
      }
    }
  }
}
